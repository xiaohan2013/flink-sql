# bind 127.0.0.1

# 哨兵的端口号
# 因为各个哨兵节点会运行在单独的Docker容器中
# 所以无需担心端口重复使用
# 如果需要在单机
port 26381

# 设定密码认证
#requirepass 123456

# 配置哨兵的监控参数
# 格式：sentinel monitor <master-name> <ip> <redis-port> <quorum>
# master-name是为这个被监控的master起的名字
# ip是被监控的master的IP或主机名。因为Docker容器之间可以使用容器名访问，所以这里写master节点的容器名
# redis-port是被监控节点所监听的端口号
# quorom设定了当几个哨兵判定这个节点失效后，才认为这个节点真的失效了
sentinel myid 457c186767d3bba291db9225a442eb6bcb759c25

# 连接主节点的密码
# 格式：sentinel auth-pass <master-name> <password>
sentinel deny-scripts-reconfig yes

# master在连续多长时间无法响应PING指令后，就会主观判定节点下线，默认是30秒
# 格式：sentinel down-after-milliseconds <master-name> <milliseconds>
sentinel monitor local-master 127.0.0.1 6379 2

# Generated by CONFIG REWRITE
dir "/data"
sentinel auth-pass local-master 123456
sentinel config-epoch local-master 0
sentinel leader-epoch local-master 1
sentinel known-sentinel local-master 127.0.0.1 26380 bd7fda4ed4384dd401b4c60d8be246503b77247b
sentinel known-sentinel local-master 127.0.0.1 26379 577e9c430b02295f243851c33b4a7e671f890680
sentinel current-epoch 1
